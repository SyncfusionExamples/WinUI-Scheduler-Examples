//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace SchedulerHeatMap
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        private global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[52];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "SchedulerHeatMap.HeatMapViewModel";
            _typeNameTable[5] = "System.Collections.ObjectModel.ObservableCollection`1<SchedulerHeatMap.InternetData>";
            _typeNameTable[6] = "System.Collections.ObjectModel.Collection`1<SchedulerHeatMap.InternetData>";
            _typeNameTable[7] = "SchedulerHeatMap.InternetData";
            _typeNameTable[8] = "Syncfusion.UI.Xaml.Core.NotificationObject";
            _typeNameTable[9] = "Int32";
            _typeNameTable[10] = "System.DateTime";
            _typeNameTable[11] = "System.ValueType";
            _typeNameTable[12] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[13] = "Syncfusion.UI.Xaml.Scheduler.SfScheduler";
            _typeNameTable[14] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[15] = "System.Collections.IEnumerable";
            _typeNameTable[16] = "Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag";
            _typeNameTable[17] = "System.Enum";
            _typeNameTable[18] = "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping";
            _typeNameTable[19] = "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings";
            _typeNameTable[20] = "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase";
            _typeNameTable[21] = "System.Windows.Input.ICommand";
            _typeNameTable[22] = "Syncfusion.UI.Xaml.Scheduler.AppointmentResizeController";
            _typeNameTable[23] = "Microsoft.UI.Xaml.Controls.MenuFlyout";
            _typeNameTable[24] = "System.Nullable`1<System.DateTime>";
            _typeNameTable[25] = "Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes";
            _typeNameTable[26] = "String";
            _typeNameTable[27] = "Syncfusion.UI.Xaml.Scheduler.ResourceGroupType";
            _typeNameTable[28] = "Syncfusion.UI.Xaml.Scheduler.ResourceMapping";
            _typeNameTable[29] = "Double";
            _typeNameTable[30] = "Syncfusion.UI.Xaml.Scheduler.SchedulerViewType";
            _typeNameTable[31] = "System.DayOfWeek";
            _typeNameTable[32] = "System.Collections.ObjectModel.ObservableCollection`1<System.DateTime>";
            _typeNameTable[33] = "System.Collections.ObjectModel.Collection`1<System.DateTime>";
            _typeNameTable[34] = "System.DateTimeKind";
            _typeNameTable[35] = "Int64";
            _typeNameTable[36] = "TimeSpan";
            _typeNameTable[37] = "Syncfusion.UI.Xaml.Scheduler.DaysViewSettings";
            _typeNameTable[38] = "Syncfusion.UI.Xaml.Scheduler.TimeSlotViewSettings";
            _typeNameTable[39] = "Syncfusion.UI.Xaml.Scheduler.TimelineViewSettings";
            _typeNameTable[40] = "Syncfusion.UI.Xaml.Scheduler.DragDropSettings";
            _typeNameTable[41] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[42] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[43] = "Syncfusion.UI.Xaml.Scheduler.ReminderMapping";
            _typeNameTable[44] = "Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode";
            _typeNameTable[45] = "Microsoft.UI.Xaml.Controls.Orientation";
            _typeNameTable[46] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[47] = "SchedulerHeatMap.MainWindow";
            _typeNameTable[48] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[49] = "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter";
            _typeNameTable[50] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[51] = "Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter";

            _typeTable = new global::System.Type[52];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::SchedulerHeatMap.HeatMapViewModel);
            _typeTable[5] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::SchedulerHeatMap.InternetData>);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.Collection<global::SchedulerHeatMap.InternetData>);
            _typeTable[7] = typeof(global::SchedulerHeatMap.InternetData);
            _typeTable[8] = typeof(global::Syncfusion.UI.Xaml.Core.NotificationObject);
            _typeTable[9] = typeof(global::System.Int32);
            _typeTable[10] = typeof(global::System.DateTime);
            _typeTable[11] = typeof(global::System.ValueType);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[13] = typeof(global::Syncfusion.UI.Xaml.Scheduler.SfScheduler);
            _typeTable[14] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[15] = typeof(global::System.Collections.IEnumerable);
            _typeTable[16] = typeof(global::Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag);
            _typeTable[17] = typeof(global::System.Enum);
            _typeTable[18] = typeof(global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping);
            _typeTable[19] = typeof(global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings);
            _typeTable[20] = typeof(global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase);
            _typeTable[21] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[22] = typeof(global::Syncfusion.UI.Xaml.Scheduler.AppointmentResizeController);
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.Controls.MenuFlyout);
            _typeTable[24] = typeof(global::System.Nullable<global::System.DateTime>);
            _typeTable[25] = typeof(global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes);
            _typeTable[26] = typeof(global::System.String);
            _typeTable[27] = typeof(global::Syncfusion.UI.Xaml.Scheduler.ResourceGroupType);
            _typeTable[28] = typeof(global::Syncfusion.UI.Xaml.Scheduler.ResourceMapping);
            _typeTable[29] = typeof(global::System.Double);
            _typeTable[30] = typeof(global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType);
            _typeTable[31] = typeof(global::System.DayOfWeek);
            _typeTable[32] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.DateTime>);
            _typeTable[33] = typeof(global::System.Collections.ObjectModel.Collection<global::System.DateTime>);
            _typeTable[34] = typeof(global::System.DateTimeKind);
            _typeTable[35] = typeof(global::System.Int64);
            _typeTable[36] = typeof(global::System.TimeSpan);
            _typeTable[37] = typeof(global::Syncfusion.UI.Xaml.Scheduler.DaysViewSettings);
            _typeTable[38] = typeof(global::Syncfusion.UI.Xaml.Scheduler.TimeSlotViewSettings);
            _typeTable[39] = typeof(global::Syncfusion.UI.Xaml.Scheduler.TimelineViewSettings);
            _typeTable[40] = typeof(global::Syncfusion.UI.Xaml.Scheduler.DragDropSettings);
            _typeTable[41] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[42] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[43] = typeof(global::Syncfusion.UI.Xaml.Scheduler.ReminderMapping);
            _typeTable[44] = typeof(global::Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode);
            _typeTable[45] = typeof(global::Microsoft.UI.Xaml.Controls.Orientation);
            _typeTable[46] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[47] = typeof(global::SchedulerHeatMap.MainWindow);
            _typeTable[48] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[49] = typeof(global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter);
            _typeTable[50] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[51] = typeof(global::Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_HeatMapViewModel() { return new global::SchedulerHeatMap.HeatMapViewModel(); }
        private object Activate_5_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::SchedulerHeatMap.InternetData>(); }
        private object Activate_6_Collection() { return new global::System.Collections.ObjectModel.Collection<global::SchedulerHeatMap.InternetData>(); }
        private object Activate_7_InternetData() { return new global::SchedulerHeatMap.InternetData(); }
        private object Activate_13_SfScheduler() { return new global::Syncfusion.UI.Xaml.Scheduler.SfScheduler(); }
        private object Activate_18_AppointmentMapping() { return new global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping(); }
        private object Activate_19_MonthViewSettings() { return new global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings(); }
        private object Activate_28_ResourceMapping() { return new global::Syncfusion.UI.Xaml.Scheduler.ResourceMapping(); }
        private object Activate_32_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.DateTime>(); }
        private object Activate_33_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.DateTime>(); }
        private object Activate_37_DaysViewSettings() { return new global::Syncfusion.UI.Xaml.Scheduler.DaysViewSettings(); }
        private object Activate_39_TimelineViewSettings() { return new global::Syncfusion.UI.Xaml.Scheduler.TimelineViewSettings(); }
        private object Activate_40_DragDropSettings() { return new global::Syncfusion.UI.Xaml.Scheduler.DragDropSettings(); }
        private object Activate_43_ReminderMapping() { return new global::Syncfusion.UI.Xaml.Scheduler.ReminderMapping(); }
        private object Activate_47_MainWindow() { return new global::SchedulerHeatMap.MainWindow(); }
        private object Activate_49_DoubleToObjectConverter() { return new global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter(); }
        private object Activate_51_DoubleToVisibilityConverter() { return new global::Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_5_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::SchedulerHeatMap.InternetData>)instance;
            var newItem = (global::SchedulerHeatMap.InternetData)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::SchedulerHeatMap.InternetData>)instance;
            var newItem = (global::SchedulerHeatMap.InternetData)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTime>)instance;
            var newItem = (global::System.DateTime)item;
            collection.Add(newItem);
        }
        private void VectorAdd_33_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.DateTime>)instance;
            var newItem = (global::System.DateTime)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  SchedulerHeatMap.HeatMapViewModel
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_HeatMapViewModel;
                userType.AddMemberName("InternetDataUsages");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  System.Collections.ObjectModel.ObservableCollection`1<SchedulerHeatMap.InternetData>
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<SchedulerHeatMap.InternetData>"));
                userType.CollectionAdd = VectorAdd_5_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.Collection`1<SchedulerHeatMap.InternetData>
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_Collection;
                userType.CollectionAdd = VectorAdd_6_Collection;
                xamlType = userType;
                break;

            case 7:   //  SchedulerHeatMap.InternetData
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Core.NotificationObject"));
                userType.Activator = Activate_7_InternetData;
                userType.AddMemberName("Usage");
                userType.AddMemberName("Date");
                userType.AddMemberName("Color");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Syncfusion.UI.Xaml.Core.NotificationObject
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 9:   //  Int32
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  System.DateTime
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Date");
                userType.AddMemberName("Day");
                userType.AddMemberName("DayOfWeek");
                userType.AddMemberName("DayOfYear");
                userType.AddMemberName("Hour");
                userType.AddMemberName("Kind");
                userType.AddMemberName("Millisecond");
                userType.AddMemberName("Minute");
                userType.AddMemberName("Month");
                userType.AddMemberName("Second");
                userType.AddMemberName("Ticks");
                userType.AddMemberName("TimeOfDay");
                userType.AddMemberName("Year");
                xamlType = userType;
                break;

            case 11:   //  System.ValueType
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 12:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Syncfusion.UI.Xaml.Scheduler.SfScheduler
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_13_SfScheduler;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("AppointmentEditFlag");
                userType.AddMemberName("AppointmentMapping");
                userType.AddMemberName("MonthViewSettings");
                userType.AddMemberName("LoadOnDemandCommand");
                userType.AddMemberName("AppointmentResizeController");
                userType.AddMemberName("AppointmentContextFlyout");
                userType.AddMemberName("CellContextFlyout");
                userType.AddMemberName("SelectedDate");
                userType.AddMemberName("AllowViewNavigation");
                userType.AddMemberName("ShowDatePickerButton");
                userType.AddMemberName("AllowedViewTypes");
                userType.AddMemberName("CalendarIdentifier");
                userType.AddMemberName("ResourceGroupType");
                userType.AddMemberName("ResourceMapping");
                userType.AddMemberName("HeaderDateFormat");
                userType.AddMemberName("TimeZone");
                userType.AddMemberName("HeaderHeight");
                userType.AddMemberName("ViewType");
                userType.AddMemberName("DisplayDate");
                userType.AddMemberName("EnableReminder");
                userType.AddMemberName("ShowBusyIndicator");
                userType.AddMemberName("MinimumDate");
                userType.AddMemberName("MaximumDate");
                userType.AddMemberName("FirstDayOfWeek");
                userType.AddMemberName("BlackoutDates");
                userType.AddMemberName("DaysViewSettings");
                userType.AddMemberName("TimelineViewSettings");
                userType.AddMemberName("DragDropSettings");
                userType.AddMemberName("ResourceCollection");
                userType.AddMemberName("ResourceHeaderTemplate");
                userType.AddMemberName("ResourceHeaderTemplateSelector");
                userType.AddMemberName("HeaderTemplate");
                xamlType = userType;
                break;

            case 14:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  System.Collections.IEnumerable
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Add", global::Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag.Add);
                userType.AddEnumValue("Edit", global::Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag.Edit);
                userType.AddEnumValue("Resize", global::Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag.Resize);
                userType.AddEnumValue("DragDrop", global::Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag.DragDrop);
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag.None);
                xamlType = userType;
                break;

            case 17:   //  System.Enum
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 18:   //  Syncfusion.UI.Xaml.Scheduler.AppointmentMapping
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_18_AppointmentMapping;
                userType.AddMemberName("StartTime");
                userType.AddMemberName("AppointmentBackground");
                userType.AddMemberName("Subject");
                userType.AddMemberName("Notes");
                userType.AddMemberName("Location");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("EndTime");
                userType.AddMemberName("StartTimeZone");
                userType.AddMemberName("EndTimeZone");
                userType.AddMemberName("MinimumAppointmentHeight");
                userType.AddMemberName("IsAllDay");
                userType.AddMemberName("RecurrenceRule");
                userType.AddMemberName("RecurrenceExceptionDates");
                userType.AddMemberName("RecurrenceId");
                userType.AddMemberName("Id");
                userType.AddMemberName("ResourceIdCollection");
                userType.AddMemberName("Reminders");
                userType.AddMemberName("ReminderMapping");
                xamlType = userType;
                break;

            case 19:   //  Syncfusion.UI.Xaml.Scheduler.MonthViewSettings
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase"));
                userType.Activator = Activate_19_MonthViewSettings;
                userType.AddMemberName("AppointmentDisplayMode");
                userType.AddMemberName("MonthCellTemplate");
                userType.AddMemberName("AppointmentDisplayCount");
                userType.AddMemberName("MonthNavigationDirection");
                userType.AddMemberName("LeadingDaysVisibility");
                userType.AddMemberName("TrailingDaysVisibility");
                userType.AddMemberName("ShowWeekNumber");
                userType.AddMemberName("ShowAgendaView");
                userType.AddMemberName("DateFormat");
                userType.AddMemberName("AgendaViewHeight");
                userType.AddMemberName("WeekNumberTemplate");
                userType.AddMemberName("MonthCellTemplateSelector");
                userType.AddMemberName("MoreAppointmentsIndicatorTemplate");
                xamlType = userType;
                break;

            case 20:   //  Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("VisibleResourceCount");
                userType.AddMemberName("ResourceHeaderSize");
                userType.AddMemberName("AppointmentTemplate");
                userType.AddMemberName("AppointmentTemplateSelector");
                userType.AddMemberName("ViewHeaderDayFormat");
                userType.AddMemberName("ViewHeaderHeight");
                userType.AddMemberName("ViewHeaderTemplate");
                xamlType = userType;
                break;

            case 21:   //  System.Windows.Input.ICommand
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Syncfusion.UI.Xaml.Scheduler.AppointmentResizeController
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  Microsoft.UI.Xaml.Controls.MenuFlyout
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  System.Nullable`1<System.DateTime>
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("System.DateTime"));
                userType.BoxInstance = userType.BoxType<global::System.DateTime>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 25:   //  Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.None);
                userType.AddEnumValue("Month", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.Month);
                userType.AddEnumValue("Day", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.Day);
                userType.AddEnumValue("Week", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.Week);
                userType.AddEnumValue("WorkWeek", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.WorkWeek);
                userType.AddEnumValue("TimelineDay", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.TimelineDay);
                userType.AddEnumValue("TimelineWeek", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.TimelineWeek);
                userType.AddEnumValue("TimelineWorkWeek", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.TimelineWorkWeek);
                userType.AddEnumValue("TimelineMonth", global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes.TimelineMonth);
                xamlType = userType;
                break;

            case 26:   //  String
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Syncfusion.UI.Xaml.Scheduler.ResourceGroupType
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Date", global::Syncfusion.UI.Xaml.Scheduler.ResourceGroupType.Date);
                userType.AddEnumValue("Resource", global::Syncfusion.UI.Xaml.Scheduler.ResourceGroupType.Resource);
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Scheduler.ResourceGroupType.None);
                xamlType = userType;
                break;

            case 28:   //  Syncfusion.UI.Xaml.Scheduler.ResourceMapping
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Double
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Syncfusion.UI.Xaml.Scheduler.SchedulerViewType
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Month", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.Month);
                userType.AddEnumValue("Day", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.Day);
                userType.AddEnumValue("Week", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.Week);
                userType.AddEnumValue("WorkWeek", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.WorkWeek);
                userType.AddEnumValue("TimelineDay", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.TimelineDay);
                userType.AddEnumValue("TimelineWeek", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.TimelineWeek);
                userType.AddEnumValue("TimelineWorkWeek", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.TimelineWorkWeek);
                userType.AddEnumValue("TimelineMonth", global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType.TimelineMonth);
                xamlType = userType;
                break;

            case 31:   //  System.DayOfWeek
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Sunday", global::System.DayOfWeek.Sunday);
                userType.AddEnumValue("Monday", global::System.DayOfWeek.Monday);
                userType.AddEnumValue("Tuesday", global::System.DayOfWeek.Tuesday);
                userType.AddEnumValue("Wednesday", global::System.DayOfWeek.Wednesday);
                userType.AddEnumValue("Thursday", global::System.DayOfWeek.Thursday);
                userType.AddEnumValue("Friday", global::System.DayOfWeek.Friday);
                userType.AddEnumValue("Saturday", global::System.DayOfWeek.Saturday);
                xamlType = userType;
                break;

            case 32:   //  System.Collections.ObjectModel.ObservableCollection`1<System.DateTime>
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<System.DateTime>"));
                userType.CollectionAdd = VectorAdd_32_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  System.Collections.ObjectModel.Collection`1<System.DateTime>
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_Collection;
                userType.CollectionAdd = VectorAdd_33_Collection;
                xamlType = userType;
                break;

            case 34:   //  System.DateTimeKind
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unspecified", global::System.DateTimeKind.Unspecified);
                userType.AddEnumValue("Utc", global::System.DateTimeKind.Utc);
                userType.AddEnumValue("Local", global::System.DateTimeKind.Local);
                xamlType = userType;
                break;

            case 35:   //  Int64
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  TimeSpan
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Syncfusion.UI.Xaml.Scheduler.DaysViewSettings
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.TimeSlotViewSettings"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 38:   //  Syncfusion.UI.Xaml.Scheduler.TimeSlotViewSettings
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase"));
                xamlType = userType;
                break;

            case 39:   //  Syncfusion.UI.Xaml.Scheduler.TimelineViewSettings
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.TimeSlotViewSettings"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 40:   //  Syncfusion.UI.Xaml.Scheduler.DragDropSettings
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 42:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Syncfusion.UI.Xaml.Scheduler.ReminderMapping
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 44:   //  Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode.None);
                userType.AddEnumValue("Indicator", global::Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode.Indicator);
                userType.AddEnumValue("Appointment", global::Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode.Appointment);
                xamlType = userType;
                break;

            case 45:   //  Microsoft.UI.Xaml.Controls.Orientation
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 46:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  SchedulerHeatMap.MainWindow
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_47_MainWindow;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Syncfusion.UI.Xaml.Core.DoubleToObjectConverter
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_49_DoubleToObjectConverter;
                userType.AddMemberName("TrueValue");
                userType.AddMemberName("FalseValue");
                userType.AddMemberName("NullValue");
                userType.AddMemberName("GreaterThan");
                userType.AddMemberName("LessThan");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 50:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 51:   //  Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter
                userType = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter"));
                userType.Activator = Activate_51_DoubleToVisibilityConverter;
                userType.SetIsBindable();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Calendar.Syncfusion_Calendar_WinUI_Net50_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.Core.WinUI.Syncfusion_Core_WinUI_Net50_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.Editors.WinUI.Syncfusion_Editors_WinUI_Net50_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.UI.Xaml.Scheduler.Syncfusion_Scheduler_WinUI_Net50_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_HeatMapViewModel_InternetDataUsages(object instance)
        {
            var that = (global::SchedulerHeatMap.HeatMapViewModel)instance;
            return that.InternetDataUsages;
        }
        private void set_1_HeatMapViewModel_InternetDataUsages(object instance, object Value)
        {
            var that = (global::SchedulerHeatMap.HeatMapViewModel)instance;
            that.InternetDataUsages = (global::System.Collections.ObjectModel.ObservableCollection<global::SchedulerHeatMap.InternetData>)Value;
        }
        private object get_2_InternetData_Usage(object instance)
        {
            var that = (global::SchedulerHeatMap.InternetData)instance;
            return that.Usage;
        }
        private void set_2_InternetData_Usage(object instance, object Value)
        {
            var that = (global::SchedulerHeatMap.InternetData)instance;
            that.Usage = (global::System.Int32)Value;
        }
        private object get_3_InternetData_Date(object instance)
        {
            var that = (global::SchedulerHeatMap.InternetData)instance;
            return that.Date;
        }
        private void set_3_InternetData_Date(object instance, object Value)
        {
            var that = (global::SchedulerHeatMap.InternetData)instance;
            that.Date = (global::System.DateTime)Value;
        }
        private object get_4_InternetData_Color(object instance)
        {
            var that = (global::SchedulerHeatMap.InternetData)instance;
            return that.Color;
        }
        private void set_4_InternetData_Color(object instance, object Value)
        {
            var that = (global::SchedulerHeatMap.InternetData)instance;
            that.Color = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_5_SfScheduler_ItemsSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ItemsSource;
        }
        private void set_5_SfScheduler_ItemsSource(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ItemsSource = (global::System.Collections.IEnumerable)Value;
        }
        private object get_6_SfScheduler_AppointmentEditFlag(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.AppointmentEditFlag;
        }
        private void set_6_SfScheduler_AppointmentEditFlag(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.AppointmentEditFlag = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag)Value;
        }
        private object get_7_SfScheduler_AppointmentMapping(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.AppointmentMapping;
        }
        private void set_7_SfScheduler_AppointmentMapping(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.AppointmentMapping = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)Value;
        }
        private object get_8_SfScheduler_MonthViewSettings(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.MonthViewSettings;
        }
        private void set_8_SfScheduler_MonthViewSettings(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.MonthViewSettings = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)Value;
        }
        private object get_9_SfScheduler_LoadOnDemandCommand(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.LoadOnDemandCommand;
        }
        private void set_9_SfScheduler_LoadOnDemandCommand(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.LoadOnDemandCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_10_SfScheduler_AppointmentResizeController(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.AppointmentResizeController;
        }
        private void set_10_SfScheduler_AppointmentResizeController(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.AppointmentResizeController = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentResizeController)Value;
        }
        private object get_11_SfScheduler_AppointmentContextFlyout(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.AppointmentContextFlyout;
        }
        private void set_11_SfScheduler_AppointmentContextFlyout(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.AppointmentContextFlyout = (global::Microsoft.UI.Xaml.Controls.MenuFlyout)Value;
        }
        private object get_12_SfScheduler_CellContextFlyout(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.CellContextFlyout;
        }
        private void set_12_SfScheduler_CellContextFlyout(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.CellContextFlyout = (global::Microsoft.UI.Xaml.Controls.MenuFlyout)Value;
        }
        private object get_13_SfScheduler_SelectedDate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.SelectedDate;
        }
        private void set_13_SfScheduler_SelectedDate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.SelectedDate = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_14_SfScheduler_AllowViewNavigation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.AllowViewNavigation;
        }
        private void set_14_SfScheduler_AllowViewNavigation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.AllowViewNavigation = (global::System.Boolean)Value;
        }
        private object get_15_SfScheduler_ShowDatePickerButton(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ShowDatePickerButton;
        }
        private void set_15_SfScheduler_ShowDatePickerButton(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ShowDatePickerButton = (global::System.Boolean)Value;
        }
        private object get_16_SfScheduler_AllowedViewTypes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.AllowedViewTypes;
        }
        private void set_16_SfScheduler_AllowedViewTypes(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.AllowedViewTypes = (global::Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes)Value;
        }
        private object get_17_SfScheduler_CalendarIdentifier(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.CalendarIdentifier;
        }
        private void set_17_SfScheduler_CalendarIdentifier(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.CalendarIdentifier = (global::System.String)Value;
        }
        private object get_18_SfScheduler_ResourceGroupType(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ResourceGroupType;
        }
        private void set_18_SfScheduler_ResourceGroupType(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ResourceGroupType = (global::Syncfusion.UI.Xaml.Scheduler.ResourceGroupType)Value;
        }
        private object get_19_SfScheduler_ResourceMapping(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ResourceMapping;
        }
        private void set_19_SfScheduler_ResourceMapping(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ResourceMapping = (global::Syncfusion.UI.Xaml.Scheduler.ResourceMapping)Value;
        }
        private object get_20_SfScheduler_HeaderDateFormat(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.HeaderDateFormat;
        }
        private void set_20_SfScheduler_HeaderDateFormat(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.HeaderDateFormat = (global::System.String)Value;
        }
        private object get_21_SfScheduler_TimeZone(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.TimeZone;
        }
        private void set_21_SfScheduler_TimeZone(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.TimeZone = (global::System.String)Value;
        }
        private object get_22_SfScheduler_HeaderHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.HeaderHeight;
        }
        private void set_22_SfScheduler_HeaderHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.HeaderHeight = (global::System.Double)Value;
        }
        private object get_23_SfScheduler_ViewType(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ViewType;
        }
        private void set_23_SfScheduler_ViewType(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ViewType = (global::Syncfusion.UI.Xaml.Scheduler.SchedulerViewType)Value;
        }
        private object get_24_SfScheduler_DisplayDate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.DisplayDate;
        }
        private void set_24_SfScheduler_DisplayDate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.DisplayDate = (global::System.DateTime)Value;
        }
        private object get_25_SfScheduler_EnableReminder(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.EnableReminder;
        }
        private void set_25_SfScheduler_EnableReminder(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.EnableReminder = (global::System.Boolean)Value;
        }
        private object get_26_SfScheduler_ShowBusyIndicator(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ShowBusyIndicator;
        }
        private void set_26_SfScheduler_ShowBusyIndicator(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ShowBusyIndicator = (global::System.Boolean)Value;
        }
        private object get_27_SfScheduler_MinimumDate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.MinimumDate;
        }
        private void set_27_SfScheduler_MinimumDate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.MinimumDate = (global::System.DateTime)Value;
        }
        private object get_28_SfScheduler_MaximumDate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.MaximumDate;
        }
        private void set_28_SfScheduler_MaximumDate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.MaximumDate = (global::System.DateTime)Value;
        }
        private object get_29_SfScheduler_FirstDayOfWeek(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.FirstDayOfWeek;
        }
        private void set_29_SfScheduler_FirstDayOfWeek(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.FirstDayOfWeek = (global::System.DayOfWeek)Value;
        }
        private object get_30_SfScheduler_BlackoutDates(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.BlackoutDates;
        }
        private void set_30_SfScheduler_BlackoutDates(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.BlackoutDates = (global::System.Collections.ObjectModel.ObservableCollection<global::System.DateTime>)Value;
        }
        private object get_31_DateTime_Date(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Date;
        }
        private object get_32_DateTime_Day(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Day;
        }
        private object get_33_DateTime_DayOfWeek(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.DayOfWeek;
        }
        private object get_34_DateTime_DayOfYear(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.DayOfYear;
        }
        private object get_35_DateTime_Hour(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Hour;
        }
        private object get_36_DateTime_Kind(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Kind;
        }
        private object get_37_DateTime_Millisecond(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Millisecond;
        }
        private object get_38_DateTime_Minute(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Minute;
        }
        private object get_39_DateTime_Month(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Month;
        }
        private object get_40_DateTime_Second(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Second;
        }
        private object get_41_DateTime_Ticks(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Ticks;
        }
        private object get_42_DateTime_TimeOfDay(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.TimeOfDay;
        }
        private object get_43_DateTime_Year(object instance)
        {
            var that = (global::System.DateTime)instance;
            return that.Year;
        }
        private object get_44_SfScheduler_DaysViewSettings(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.DaysViewSettings;
        }
        private void set_44_SfScheduler_DaysViewSettings(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.DaysViewSettings = (global::Syncfusion.UI.Xaml.Scheduler.DaysViewSettings)Value;
        }
        private object get_45_SfScheduler_TimelineViewSettings(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.TimelineViewSettings;
        }
        private void set_45_SfScheduler_TimelineViewSettings(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.TimelineViewSettings = (global::Syncfusion.UI.Xaml.Scheduler.TimelineViewSettings)Value;
        }
        private object get_46_SfScheduler_DragDropSettings(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.DragDropSettings;
        }
        private void set_46_SfScheduler_DragDropSettings(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.DragDropSettings = (global::Syncfusion.UI.Xaml.Scheduler.DragDropSettings)Value;
        }
        private object get_47_SfScheduler_ResourceCollection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ResourceCollection;
        }
        private void set_47_SfScheduler_ResourceCollection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ResourceCollection = (global::System.Collections.IEnumerable)Value;
        }
        private object get_48_SfScheduler_ResourceHeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ResourceHeaderTemplate;
        }
        private void set_48_SfScheduler_ResourceHeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ResourceHeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_49_SfScheduler_ResourceHeaderTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.ResourceHeaderTemplateSelector;
        }
        private void set_49_SfScheduler_ResourceHeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.ResourceHeaderTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_50_SfScheduler_HeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            return that.HeaderTemplate;
        }
        private void set_50_SfScheduler_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.SfScheduler)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_51_AppointmentMapping_StartTime(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.StartTime;
        }
        private void set_51_AppointmentMapping_StartTime(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.StartTime = (global::System.String)Value;
        }
        private object get_52_AppointmentMapping_AppointmentBackground(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.AppointmentBackground;
        }
        private void set_52_AppointmentMapping_AppointmentBackground(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.AppointmentBackground = (global::System.String)Value;
        }
        private object get_53_AppointmentMapping_Subject(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.Subject;
        }
        private void set_53_AppointmentMapping_Subject(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.Subject = (global::System.String)Value;
        }
        private object get_54_AppointmentMapping_Notes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.Notes;
        }
        private void set_54_AppointmentMapping_Notes(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.Notes = (global::System.String)Value;
        }
        private object get_55_AppointmentMapping_Location(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.Location;
        }
        private void set_55_AppointmentMapping_Location(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.Location = (global::System.String)Value;
        }
        private object get_56_AppointmentMapping_Foreground(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.Foreground;
        }
        private void set_56_AppointmentMapping_Foreground(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.Foreground = (global::System.String)Value;
        }
        private object get_57_AppointmentMapping_EndTime(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.EndTime;
        }
        private void set_57_AppointmentMapping_EndTime(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.EndTime = (global::System.String)Value;
        }
        private object get_58_AppointmentMapping_StartTimeZone(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.StartTimeZone;
        }
        private void set_58_AppointmentMapping_StartTimeZone(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.StartTimeZone = (global::System.String)Value;
        }
        private object get_59_AppointmentMapping_EndTimeZone(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.EndTimeZone;
        }
        private void set_59_AppointmentMapping_EndTimeZone(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.EndTimeZone = (global::System.String)Value;
        }
        private object get_60_AppointmentMapping_MinimumAppointmentHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.MinimumAppointmentHeight;
        }
        private void set_60_AppointmentMapping_MinimumAppointmentHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.MinimumAppointmentHeight = (global::System.String)Value;
        }
        private object get_61_AppointmentMapping_IsAllDay(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.IsAllDay;
        }
        private void set_61_AppointmentMapping_IsAllDay(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.IsAllDay = (global::System.String)Value;
        }
        private object get_62_AppointmentMapping_RecurrenceRule(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.RecurrenceRule;
        }
        private void set_62_AppointmentMapping_RecurrenceRule(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.RecurrenceRule = (global::System.String)Value;
        }
        private object get_63_AppointmentMapping_RecurrenceExceptionDates(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.RecurrenceExceptionDates;
        }
        private void set_63_AppointmentMapping_RecurrenceExceptionDates(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.RecurrenceExceptionDates = (global::System.String)Value;
        }
        private object get_64_AppointmentMapping_RecurrenceId(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.RecurrenceId;
        }
        private void set_64_AppointmentMapping_RecurrenceId(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.RecurrenceId = (global::System.String)Value;
        }
        private object get_65_AppointmentMapping_Id(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.Id;
        }
        private void set_65_AppointmentMapping_Id(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_66_AppointmentMapping_ResourceIdCollection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.ResourceIdCollection;
        }
        private void set_66_AppointmentMapping_ResourceIdCollection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.ResourceIdCollection = (global::System.String)Value;
        }
        private object get_67_AppointmentMapping_Reminders(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.Reminders;
        }
        private void set_67_AppointmentMapping_Reminders(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.Reminders = (global::System.String)Value;
        }
        private object get_68_AppointmentMapping_ReminderMapping(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            return that.ReminderMapping;
        }
        private void set_68_AppointmentMapping_ReminderMapping(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentMapping)instance;
            that.ReminderMapping = (global::Syncfusion.UI.Xaml.Scheduler.ReminderMapping)Value;
        }
        private object get_69_MonthViewSettings_AppointmentDisplayMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.AppointmentDisplayMode;
        }
        private void set_69_MonthViewSettings_AppointmentDisplayMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.AppointmentDisplayMode = (global::Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode)Value;
        }
        private object get_70_MonthViewSettings_MonthCellTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.MonthCellTemplate;
        }
        private void set_70_MonthViewSettings_MonthCellTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.MonthCellTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_71_MonthViewSettings_AppointmentDisplayCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.AppointmentDisplayCount;
        }
        private void set_71_MonthViewSettings_AppointmentDisplayCount(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.AppointmentDisplayCount = (global::System.Int32)Value;
        }
        private object get_72_MonthViewSettings_MonthNavigationDirection(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.MonthNavigationDirection;
        }
        private void set_72_MonthViewSettings_MonthNavigationDirection(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.MonthNavigationDirection = (global::Microsoft.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_73_MonthViewSettings_LeadingDaysVisibility(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.LeadingDaysVisibility;
        }
        private void set_73_MonthViewSettings_LeadingDaysVisibility(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.LeadingDaysVisibility = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_74_MonthViewSettings_TrailingDaysVisibility(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.TrailingDaysVisibility;
        }
        private void set_74_MonthViewSettings_TrailingDaysVisibility(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.TrailingDaysVisibility = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_75_MonthViewSettings_ShowWeekNumber(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.ShowWeekNumber;
        }
        private void set_75_MonthViewSettings_ShowWeekNumber(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.ShowWeekNumber = (global::System.Boolean)Value;
        }
        private object get_76_MonthViewSettings_ShowAgendaView(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.ShowAgendaView;
        }
        private void set_76_MonthViewSettings_ShowAgendaView(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.ShowAgendaView = (global::System.Boolean)Value;
        }
        private object get_77_MonthViewSettings_DateFormat(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.DateFormat;
        }
        private void set_77_MonthViewSettings_DateFormat(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.DateFormat = (global::System.String)Value;
        }
        private object get_78_MonthViewSettings_AgendaViewHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.AgendaViewHeight;
        }
        private void set_78_MonthViewSettings_AgendaViewHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.AgendaViewHeight = (global::System.Double)Value;
        }
        private object get_79_MonthViewSettings_WeekNumberTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.WeekNumberTemplate;
        }
        private void set_79_MonthViewSettings_WeekNumberTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.WeekNumberTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_80_MonthViewSettings_MonthCellTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.MonthCellTemplateSelector;
        }
        private void set_80_MonthViewSettings_MonthCellTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.MonthCellTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_81_MonthViewSettings_MoreAppointmentsIndicatorTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            return that.MoreAppointmentsIndicatorTemplate;
        }
        private void set_81_MonthViewSettings_MoreAppointmentsIndicatorTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.MonthViewSettings)instance;
            that.MoreAppointmentsIndicatorTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_82_ViewSettingsBase_VisibleResourceCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            return that.VisibleResourceCount;
        }
        private void set_82_ViewSettingsBase_VisibleResourceCount(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            that.VisibleResourceCount = (global::System.Int32)Value;
        }
        private object get_83_ViewSettingsBase_ResourceHeaderSize(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            return that.ResourceHeaderSize;
        }
        private void set_83_ViewSettingsBase_ResourceHeaderSize(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            that.ResourceHeaderSize = (global::System.Double)Value;
        }
        private object get_84_ViewSettingsBase_AppointmentTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            return that.AppointmentTemplate;
        }
        private void set_84_ViewSettingsBase_AppointmentTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            that.AppointmentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_85_ViewSettingsBase_AppointmentTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            return that.AppointmentTemplateSelector;
        }
        private void set_85_ViewSettingsBase_AppointmentTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            that.AppointmentTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_86_ViewSettingsBase_ViewHeaderDayFormat(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            return that.ViewHeaderDayFormat;
        }
        private void set_86_ViewSettingsBase_ViewHeaderDayFormat(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            that.ViewHeaderDayFormat = (global::System.String)Value;
        }
        private object get_87_ViewSettingsBase_ViewHeaderHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            return that.ViewHeaderHeight;
        }
        private void set_87_ViewSettingsBase_ViewHeaderHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            that.ViewHeaderHeight = (global::System.Double)Value;
        }
        private object get_88_ViewSettingsBase_ViewHeaderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            return that.ViewHeaderTemplate;
        }
        private void set_88_ViewSettingsBase_ViewHeaderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase)instance;
            that.ViewHeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_89_DoubleToObjectConverter_TrueValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.TrueValue;
        }
        private void set_89_DoubleToObjectConverter_TrueValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.TrueValue = (global::System.Object)Value;
        }
        private object get_90_DoubleToObjectConverter_FalseValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.FalseValue;
        }
        private void set_90_DoubleToObjectConverter_FalseValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.FalseValue = (global::System.Object)Value;
        }
        private object get_91_DoubleToObjectConverter_NullValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.NullValue;
        }
        private void set_91_DoubleToObjectConverter_NullValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.NullValue = (global::System.Object)Value;
        }
        private object get_92_DoubleToObjectConverter_GreaterThan(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.GreaterThan;
        }
        private void set_92_DoubleToObjectConverter_GreaterThan(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.GreaterThan = (global::System.Double)Value;
        }
        private object get_93_DoubleToObjectConverter_LessThan(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.LessThan;
        }
        private void set_93_DoubleToObjectConverter_LessThan(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.LessThan = (global::System.Double)Value;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember xamlMember = null;
            global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "SchedulerHeatMap.HeatMapViewModel.InternetDataUsages":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SchedulerHeatMap.HeatMapViewModel");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "InternetDataUsages", "System.Collections.ObjectModel.ObservableCollection`1<SchedulerHeatMap.InternetData>");
                xamlMember.Getter = get_1_HeatMapViewModel_InternetDataUsages;
                xamlMember.Setter = set_1_HeatMapViewModel_InternetDataUsages;
                break;
            case "SchedulerHeatMap.InternetData.Usage":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SchedulerHeatMap.InternetData");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Usage", "Int32");
                xamlMember.Getter = get_2_InternetData_Usage;
                xamlMember.Setter = set_2_InternetData_Usage;
                break;
            case "SchedulerHeatMap.InternetData.Date":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SchedulerHeatMap.InternetData");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_3_InternetData_Date;
                xamlMember.Setter = set_3_InternetData_Date;
                break;
            case "SchedulerHeatMap.InternetData.Color":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SchedulerHeatMap.InternetData");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Color", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_4_InternetData_Color;
                xamlMember.Setter = set_4_InternetData_Color;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ItemsSource":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_SfScheduler_ItemsSource;
                xamlMember.Setter = set_5_SfScheduler_ItemsSource;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.AppointmentEditFlag":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentEditFlag", "Syncfusion.UI.Xaml.Scheduler.AppointmentEditFlag");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_SfScheduler_AppointmentEditFlag;
                xamlMember.Setter = set_6_SfScheduler_AppointmentEditFlag;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.AppointmentMapping":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentMapping", "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_SfScheduler_AppointmentMapping;
                xamlMember.Setter = set_7_SfScheduler_AppointmentMapping;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.MonthViewSettings":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MonthViewSettings", "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_SfScheduler_MonthViewSettings;
                xamlMember.Setter = set_8_SfScheduler_MonthViewSettings;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.LoadOnDemandCommand":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "LoadOnDemandCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_SfScheduler_LoadOnDemandCommand;
                xamlMember.Setter = set_9_SfScheduler_LoadOnDemandCommand;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.AppointmentResizeController":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentResizeController", "Syncfusion.UI.Xaml.Scheduler.AppointmentResizeController");
                xamlMember.Getter = get_10_SfScheduler_AppointmentResizeController;
                xamlMember.Setter = set_10_SfScheduler_AppointmentResizeController;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.AppointmentContextFlyout":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentContextFlyout", "Microsoft.UI.Xaml.Controls.MenuFlyout");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_SfScheduler_AppointmentContextFlyout;
                xamlMember.Setter = set_11_SfScheduler_AppointmentContextFlyout;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.CellContextFlyout":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "CellContextFlyout", "Microsoft.UI.Xaml.Controls.MenuFlyout");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_SfScheduler_CellContextFlyout;
                xamlMember.Setter = set_12_SfScheduler_CellContextFlyout;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.SelectedDate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "SelectedDate", "System.Nullable`1<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_SfScheduler_SelectedDate;
                xamlMember.Setter = set_13_SfScheduler_SelectedDate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.AllowViewNavigation":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AllowViewNavigation", "Boolean");
                xamlMember.Getter = get_14_SfScheduler_AllowViewNavigation;
                xamlMember.Setter = set_14_SfScheduler_AllowViewNavigation;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ShowDatePickerButton":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ShowDatePickerButton", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_SfScheduler_ShowDatePickerButton;
                xamlMember.Setter = set_15_SfScheduler_ShowDatePickerButton;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.AllowedViewTypes":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AllowedViewTypes", "Syncfusion.UI.Xaml.Scheduler.AllowedSchedulerViewTypes");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_SfScheduler_AllowedViewTypes;
                xamlMember.Setter = set_16_SfScheduler_AllowedViewTypes;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.CalendarIdentifier":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "CalendarIdentifier", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_SfScheduler_CalendarIdentifier;
                xamlMember.Setter = set_17_SfScheduler_CalendarIdentifier;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ResourceGroupType":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ResourceGroupType", "Syncfusion.UI.Xaml.Scheduler.ResourceGroupType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_SfScheduler_ResourceGroupType;
                xamlMember.Setter = set_18_SfScheduler_ResourceGroupType;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ResourceMapping":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ResourceMapping", "Syncfusion.UI.Xaml.Scheduler.ResourceMapping");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_SfScheduler_ResourceMapping;
                xamlMember.Setter = set_19_SfScheduler_ResourceMapping;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.HeaderDateFormat":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "HeaderDateFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_SfScheduler_HeaderDateFormat;
                xamlMember.Setter = set_20_SfScheduler_HeaderDateFormat;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.TimeZone":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "TimeZone", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_SfScheduler_TimeZone;
                xamlMember.Setter = set_21_SfScheduler_TimeZone;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.HeaderHeight":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "HeaderHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_SfScheduler_HeaderHeight;
                xamlMember.Setter = set_22_SfScheduler_HeaderHeight;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ViewType":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ViewType", "Syncfusion.UI.Xaml.Scheduler.SchedulerViewType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_SfScheduler_ViewType;
                xamlMember.Setter = set_23_SfScheduler_ViewType;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.DisplayDate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "DisplayDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_SfScheduler_DisplayDate;
                xamlMember.Setter = set_24_SfScheduler_DisplayDate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.EnableReminder":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "EnableReminder", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_SfScheduler_EnableReminder;
                xamlMember.Setter = set_25_SfScheduler_EnableReminder;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ShowBusyIndicator":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ShowBusyIndicator", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_SfScheduler_ShowBusyIndicator;
                xamlMember.Setter = set_26_SfScheduler_ShowBusyIndicator;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.MinimumDate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MinimumDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_SfScheduler_MinimumDate;
                xamlMember.Setter = set_27_SfScheduler_MinimumDate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.MaximumDate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MaximumDate", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_SfScheduler_MaximumDate;
                xamlMember.Setter = set_28_SfScheduler_MaximumDate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.FirstDayOfWeek":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "FirstDayOfWeek", "System.DayOfWeek");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_SfScheduler_FirstDayOfWeek;
                xamlMember.Setter = set_29_SfScheduler_FirstDayOfWeek;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.BlackoutDates":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "BlackoutDates", "System.Collections.ObjectModel.ObservableCollection`1<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_SfScheduler_BlackoutDates;
                xamlMember.Setter = set_30_SfScheduler_BlackoutDates;
                break;
            case "System.DateTime.Date":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Date", "System.DateTime");
                xamlMember.Getter = get_31_DateTime_Date;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Day":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Day", "Int32");
                xamlMember.Getter = get_32_DateTime_Day;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.DayOfWeek":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "DayOfWeek", "System.DayOfWeek");
                xamlMember.Getter = get_33_DateTime_DayOfWeek;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.DayOfYear":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "DayOfYear", "Int32");
                xamlMember.Getter = get_34_DateTime_DayOfYear;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Hour":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Hour", "Int32");
                xamlMember.Getter = get_35_DateTime_Hour;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Kind":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Kind", "System.DateTimeKind");
                xamlMember.Getter = get_36_DateTime_Kind;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Millisecond":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Millisecond", "Int32");
                xamlMember.Getter = get_37_DateTime_Millisecond;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Minute":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Minute", "Int32");
                xamlMember.Getter = get_38_DateTime_Minute;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Month":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Month", "Int32");
                xamlMember.Getter = get_39_DateTime_Month;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Second":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Second", "Int32");
                xamlMember.Getter = get_40_DateTime_Second;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Ticks":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Ticks", "Int64");
                xamlMember.Getter = get_41_DateTime_Ticks;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.TimeOfDay":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "TimeOfDay", "TimeSpan");
                xamlMember.Getter = get_42_DateTime_TimeOfDay;
                xamlMember.SetIsReadOnly();
                break;
            case "System.DateTime.Year":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.DateTime");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Year", "Int32");
                xamlMember.Getter = get_43_DateTime_Year;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.DaysViewSettings":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "DaysViewSettings", "Syncfusion.UI.Xaml.Scheduler.DaysViewSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_SfScheduler_DaysViewSettings;
                xamlMember.Setter = set_44_SfScheduler_DaysViewSettings;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.TimelineViewSettings":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "TimelineViewSettings", "Syncfusion.UI.Xaml.Scheduler.TimelineViewSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_SfScheduler_TimelineViewSettings;
                xamlMember.Setter = set_45_SfScheduler_TimelineViewSettings;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.DragDropSettings":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "DragDropSettings", "Syncfusion.UI.Xaml.Scheduler.DragDropSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_SfScheduler_DragDropSettings;
                xamlMember.Setter = set_46_SfScheduler_DragDropSettings;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ResourceCollection":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ResourceCollection", "System.Collections.IEnumerable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_SfScheduler_ResourceCollection;
                xamlMember.Setter = set_47_SfScheduler_ResourceCollection;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ResourceHeaderTemplate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ResourceHeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_SfScheduler_ResourceHeaderTemplate;
                xamlMember.Setter = set_48_SfScheduler_ResourceHeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.ResourceHeaderTemplateSelector":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ResourceHeaderTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_SfScheduler_ResourceHeaderTemplateSelector;
                xamlMember.Setter = set_49_SfScheduler_ResourceHeaderTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.SfScheduler.HeaderTemplate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.SfScheduler");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_SfScheduler_HeaderTemplate;
                xamlMember.Setter = set_50_SfScheduler_HeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.StartTime":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "StartTime", "String");
                xamlMember.Getter = get_51_AppointmentMapping_StartTime;
                xamlMember.Setter = set_51_AppointmentMapping_StartTime;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.AppointmentBackground":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentBackground", "String");
                xamlMember.Getter = get_52_AppointmentMapping_AppointmentBackground;
                xamlMember.Setter = set_52_AppointmentMapping_AppointmentBackground;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.Subject":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Subject", "String");
                xamlMember.Getter = get_53_AppointmentMapping_Subject;
                xamlMember.Setter = set_53_AppointmentMapping_Subject;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.Notes":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Notes", "String");
                xamlMember.Getter = get_54_AppointmentMapping_Notes;
                xamlMember.Setter = set_54_AppointmentMapping_Notes;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.Location":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Location", "String");
                xamlMember.Getter = get_55_AppointmentMapping_Location;
                xamlMember.Setter = set_55_AppointmentMapping_Location;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.Foreground":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Foreground", "String");
                xamlMember.Getter = get_56_AppointmentMapping_Foreground;
                xamlMember.Setter = set_56_AppointmentMapping_Foreground;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.EndTime":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "EndTime", "String");
                xamlMember.Getter = get_57_AppointmentMapping_EndTime;
                xamlMember.Setter = set_57_AppointmentMapping_EndTime;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.StartTimeZone":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "StartTimeZone", "String");
                xamlMember.Getter = get_58_AppointmentMapping_StartTimeZone;
                xamlMember.Setter = set_58_AppointmentMapping_StartTimeZone;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.EndTimeZone":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "EndTimeZone", "String");
                xamlMember.Getter = get_59_AppointmentMapping_EndTimeZone;
                xamlMember.Setter = set_59_AppointmentMapping_EndTimeZone;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.MinimumAppointmentHeight":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MinimumAppointmentHeight", "String");
                xamlMember.Getter = get_60_AppointmentMapping_MinimumAppointmentHeight;
                xamlMember.Setter = set_60_AppointmentMapping_MinimumAppointmentHeight;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.IsAllDay":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "IsAllDay", "String");
                xamlMember.Getter = get_61_AppointmentMapping_IsAllDay;
                xamlMember.Setter = set_61_AppointmentMapping_IsAllDay;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.RecurrenceRule":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "RecurrenceRule", "String");
                xamlMember.Getter = get_62_AppointmentMapping_RecurrenceRule;
                xamlMember.Setter = set_62_AppointmentMapping_RecurrenceRule;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.RecurrenceExceptionDates":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "RecurrenceExceptionDates", "String");
                xamlMember.Getter = get_63_AppointmentMapping_RecurrenceExceptionDates;
                xamlMember.Setter = set_63_AppointmentMapping_RecurrenceExceptionDates;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.RecurrenceId":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "RecurrenceId", "String");
                xamlMember.Getter = get_64_AppointmentMapping_RecurrenceId;
                xamlMember.Setter = set_64_AppointmentMapping_RecurrenceId;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.Id":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_65_AppointmentMapping_Id;
                xamlMember.Setter = set_65_AppointmentMapping_Id;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.ResourceIdCollection":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ResourceIdCollection", "String");
                xamlMember.Getter = get_66_AppointmentMapping_ResourceIdCollection;
                xamlMember.Setter = set_66_AppointmentMapping_ResourceIdCollection;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.Reminders":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "Reminders", "String");
                xamlMember.Getter = get_67_AppointmentMapping_Reminders;
                xamlMember.Setter = set_67_AppointmentMapping_Reminders;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.AppointmentMapping.ReminderMapping":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.AppointmentMapping");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ReminderMapping", "Syncfusion.UI.Xaml.Scheduler.ReminderMapping");
                xamlMember.Getter = get_68_AppointmentMapping_ReminderMapping;
                xamlMember.Setter = set_68_AppointmentMapping_ReminderMapping;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.AppointmentDisplayMode":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentDisplayMode", "Syncfusion.UI.Xaml.Scheduler.AppointmentDisplayMode");
                xamlMember.Getter = get_69_MonthViewSettings_AppointmentDisplayMode;
                xamlMember.Setter = set_69_MonthViewSettings_AppointmentDisplayMode;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.MonthCellTemplate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MonthCellTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_70_MonthViewSettings_MonthCellTemplate;
                xamlMember.Setter = set_70_MonthViewSettings_MonthCellTemplate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.AppointmentDisplayCount":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentDisplayCount", "Int32");
                xamlMember.Getter = get_71_MonthViewSettings_AppointmentDisplayCount;
                xamlMember.Setter = set_71_MonthViewSettings_AppointmentDisplayCount;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.MonthNavigationDirection":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MonthNavigationDirection", "Microsoft.UI.Xaml.Controls.Orientation");
                xamlMember.Getter = get_72_MonthViewSettings_MonthNavigationDirection;
                xamlMember.Setter = set_72_MonthViewSettings_MonthNavigationDirection;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.LeadingDaysVisibility":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "LeadingDaysVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.Getter = get_73_MonthViewSettings_LeadingDaysVisibility;
                xamlMember.Setter = set_73_MonthViewSettings_LeadingDaysVisibility;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.TrailingDaysVisibility":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "TrailingDaysVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.Getter = get_74_MonthViewSettings_TrailingDaysVisibility;
                xamlMember.Setter = set_74_MonthViewSettings_TrailingDaysVisibility;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.ShowWeekNumber":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ShowWeekNumber", "Boolean");
                xamlMember.Getter = get_75_MonthViewSettings_ShowWeekNumber;
                xamlMember.Setter = set_75_MonthViewSettings_ShowWeekNumber;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.ShowAgendaView":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ShowAgendaView", "Boolean");
                xamlMember.Getter = get_76_MonthViewSettings_ShowAgendaView;
                xamlMember.Setter = set_76_MonthViewSettings_ShowAgendaView;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.DateFormat":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "DateFormat", "String");
                xamlMember.Getter = get_77_MonthViewSettings_DateFormat;
                xamlMember.Setter = set_77_MonthViewSettings_DateFormat;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.AgendaViewHeight":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AgendaViewHeight", "Double");
                xamlMember.Getter = get_78_MonthViewSettings_AgendaViewHeight;
                xamlMember.Setter = set_78_MonthViewSettings_AgendaViewHeight;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.WeekNumberTemplate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "WeekNumberTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_79_MonthViewSettings_WeekNumberTemplate;
                xamlMember.Setter = set_79_MonthViewSettings_WeekNumberTemplate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.MonthCellTemplateSelector":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MonthCellTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.Getter = get_80_MonthViewSettings_MonthCellTemplateSelector;
                xamlMember.Setter = set_80_MonthViewSettings_MonthCellTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.MonthViewSettings.MoreAppointmentsIndicatorTemplate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.MonthViewSettings");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "MoreAppointmentsIndicatorTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_81_MonthViewSettings_MoreAppointmentsIndicatorTemplate;
                xamlMember.Setter = set_81_MonthViewSettings_MoreAppointmentsIndicatorTemplate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase.VisibleResourceCount":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "VisibleResourceCount", "Int32");
                xamlMember.Getter = get_82_ViewSettingsBase_VisibleResourceCount;
                xamlMember.Setter = set_82_ViewSettingsBase_VisibleResourceCount;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase.ResourceHeaderSize":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ResourceHeaderSize", "Double");
                xamlMember.Getter = get_83_ViewSettingsBase_ResourceHeaderSize;
                xamlMember.Setter = set_83_ViewSettingsBase_ResourceHeaderSize;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase.AppointmentTemplate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_84_ViewSettingsBase_AppointmentTemplate;
                xamlMember.Setter = set_84_ViewSettingsBase_AppointmentTemplate;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase.AppointmentTemplateSelector":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "AppointmentTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.Getter = get_85_ViewSettingsBase_AppointmentTemplateSelector;
                xamlMember.Setter = set_85_ViewSettingsBase_AppointmentTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase.ViewHeaderDayFormat":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ViewHeaderDayFormat", "String");
                xamlMember.Getter = get_86_ViewSettingsBase_ViewHeaderDayFormat;
                xamlMember.Setter = set_86_ViewSettingsBase_ViewHeaderDayFormat;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase.ViewHeaderHeight":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ViewHeaderHeight", "Double");
                xamlMember.Getter = get_87_ViewSettingsBase_ViewHeaderHeight;
                xamlMember.Setter = set_87_ViewSettingsBase_ViewHeaderHeight;
                break;
            case "Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase.ViewHeaderTemplate":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Scheduler.ViewSettingsBase");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "ViewHeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_88_ViewSettingsBase_ViewHeaderTemplate;
                xamlMember.Setter = set_88_ViewSettingsBase_ViewHeaderTemplate;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.TrueValue":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "TrueValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_DoubleToObjectConverter_TrueValue;
                xamlMember.Setter = set_89_DoubleToObjectConverter_TrueValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.FalseValue":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "FalseValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_DoubleToObjectConverter_FalseValue;
                xamlMember.Setter = set_90_DoubleToObjectConverter_FalseValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.NullValue":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "NullValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_DoubleToObjectConverter_NullValue;
                xamlMember.Setter = set_91_DoubleToObjectConverter_NullValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.GreaterThan":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "GreaterThan", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_DoubleToObjectConverter_GreaterThan;
                xamlMember.Setter = set_92_DoubleToObjectConverter_GreaterThan;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.LessThan":
                userType = (global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlMember(this, "LessThan", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_DoubleToObjectConverter_LessThan;
                xamlMember.Setter = set_93_DoubleToObjectConverter_LessThan;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SchedulerHeatMap.SchedulerHeatMap_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

